# -*- coding: utf-8 -*-
"""jack3colab.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mhpiakwGW15xqpFvgmkldil0Z8OdfWC6
"""

import numpy as np
from PIL import Image
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from sklearn.model_selection import train_test_split

#CREATING LABELS FOR RESIZED IMAGES
#RIPE=1,UNRIPE=0
import os
labels=[]
file_names=os.listdir('/content/drive/MyDrive/resized_shuffled')
print(file_names)
for file in file_names:
    if file[0]=='r':
        labels.append(1)
    else:
        labels.append(0)

import cv2
import glob
image_directory='/content/drive/MyDrive/resized_shuffled/'
image_extension=['png','jpg']
files=[]
[files.extend(glob.glob(image_directory+'*.'+e))for e in image_extension]
images_array=np.asarray([cv2.imread(file) for file in files])
print(type(images_array))
print(images_array)

print(images_array.shape)

X=images_array
Y=np.asarray(labels)

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

#scaling data
X_train_scaled=X_train/255
X_test_scaled=X_test/255

print(X_train_scaled)

import tensorflow as tf
import tensorflow_hub as hub

mobilenet_model="https://tfhub.dev/google/tf2-preview/mobilenet_v2/feature_vector/4"
pretrained_model=hub.KerasLayer(mobilenet_model,input_shape=(224,224,3),trainable=False)

num_of_classes=2
model=tf.keras.Sequential([
    pretrained_model,
    tf.keras.layers.Dense(num_of_classes)
])
model.summary()

model.compile(
    optimizer='adam',
    loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
    metrics=['acc']

)

model.fit(X_train_scaled,Y_train,epochs=5)

score,acc=model.evaluate(X_test_scaled,Y_test)
print('test loss=',score)
print('test accuracy=',acc)

from google.colab.patches import cv2_imshow
input_image = cv2.imread('/content/drive/MyDrive/redapple(1).jpg')
cv2_imshow(input_image)

#predictive system
input_image_path=input('path of img to be predicted:')
input_image=cv2.imread(input_image_path)
cv2_imshow(input_image)
input_image_resize=cv2.resize(input_image,(224,224))
input_image_scaled=input_image_resize/255
image_reshaped=np.reshape(input_image_scaled,[1,224,224,3])
input_prediction=model.predict(image_reshaped)
input_pred_label=np.argmax(input_prediction)
if input_pred_label==1:
  print('ripe')
else:
  print('unripe')

#predictive system
input_image_path=input('path of img to be predicted:')
input_image=cv2.imread(input_image_path)
cv2_imshow(input_image)
input_image_resize=cv2.resize(input_image,(224,224))
input_image_scaled=input_image_resize/255
image_reshaped=np.reshape(input_image_scaled,[1,224,224,3])
input_prediction=model.predict(image_reshaped)
input_pred_label=np.argmax(input_prediction)
if input_pred_label==1:
  print('ripe')
else:
  print('unripened')

